
class Solution {
typedef pair<int, int> pi;
    public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        // dijkstra's algorithm 
        // krushkal's algorithm 
        // if any node is remain unvisited then we will return -1 
        // if there are two or more than two components in the graphs then we will return -1 
        // so how dijkstra algorithms works ?
    
        // from each node we will approaches a new node 
        vector<int > cost (n+1, 100000007) ;

        cost[k] =  0 ;
        vector<pair<int , int >> adj[n+1] ;
         int u, v , w ;
        for(int i =0 ; i < times.size() ; i++)
        {
             u = times[i][0] ;
             v = times[i][1] ;
            w = times[i][2] ;
            adj[u].push_back(make_pair(v ,w)) ;
        }
         priority_queue<pi, vector<pi>, greater<pi> > pq;
        
        pq.push(make_pair(k, cost[k])) ;
        while(!pq.empty())
        {
             u = pq.top().first;
            pq.pop() ;
          for(auto it : adj[u])
            {
                 v = it.first ;
                 w = it.second ;
              if( cost[v] > w + cost[u] )
              {
                   cost[v] = w + cost[u] ;
                  pq.push(make_pair(v ,cost[v])) ;
              }
            }
        }

    }
};
